# Chroma Vector Database for MeluXina
# Compatible with LuxProvide Apptainer setup

name: chroma-vectordb
description: Chroma vector database service for embeddings and similarity search
image: docker://chromadb/chroma:latest

resources:
  cpu_cores: 8
  memory_gb: 32
  gpu_count: 0  # Chroma doesn't require GPU for basic operations
  disk_gb: 100
  nodes: 1
  ntasks: 1

ports:
  - container_port: 8000
    host_port: 8000
    protocol: tcp

environment:
  IS_PERSISTENT: "TRUE"
  ANONYMIZED_TELEMETRY: "False"
  ALLOW_RESET: "True"
  CHROMA_SERVER_AUTH_CREDENTIALS: ""
  CHROMA_SERVER_AUTH_PROVIDER: ""

volumes:
  # Project scratch directory for persistent vector storage
  - host_path: /project/scratch/$SLURM_JOB_ACCOUNT/team-5/chroma/data
    container_path: /chroma/chroma
    readonly: false

healthcheck:
  endpoint: /api/v1/heartbeat
  interval_seconds: 15
  timeout_seconds: 10
  retries: 3
  initial_delay: 20

# Command executed INSIDE the Apptainer container
command:
  - /bin/bash
  - -c
  - |
    set -e
    
    echo "========================================="
    echo "Chroma Vector Database Starting"
    echo "========================================="
    echo "Hostname: $(hostname)"
    echo "Date: $(date)"
    echo "========================================="
    
    # Ensure data directory exists and has correct permissions
    mkdir -p /chroma/chroma
    chmod 755 /chroma/chroma
    
    echo "Data directory: /chroma/chroma"
    ls -la /chroma/
    
    # Start Chroma server
    echo ""
    echo "Starting Chroma server on port 8000..."
    
    # Chroma server command
    python -m uvicorn chromadb.app:app \
      --host 0.0.0.0 \
      --port 8000 \
      --log-level info &
    
    SERVER_PID=$!
    echo "✓ Server PID: $SERVER_PID"
    
    # Cleanup function
    cleanup() {
        echo ""
        echo "Shutting down Chroma server..."
        kill $SERVER_PID 2>/dev/null || true
        wait $SERVER_PID 2>/dev/null || true
        echo "✓ Server stopped"
    }
    trap cleanup EXIT INT TERM
    
    # Wait for server to be ready (max 2 minutes)
    echo "Waiting for server to be ready..."
    for i in {1..60}; do
        if curl -s http://localhost:8000/api/v1/heartbeat >/dev/null 2>&1; then
            echo "✓ Server is ready!"
            break
        fi
        if [ $i -eq 60 ]; then
            echo "✗ Server failed to start within 120 seconds"
            exit 1
        fi
        sleep 2
    done
    
    # Test basic functionality
    echo ""
    echo "Testing Chroma API..."
    
    # Test heartbeat
    HEARTBEAT=$(curl -s http://localhost:8000/api/v1/heartbeat)
    echo "Heartbeat response: $HEARTBEAT"
    
    # Test version
    VERSION=$(curl -s http://localhost:8000/api/v1/version)
    echo "Version: $VERSION"
    
    # Display connection information
    COMPUTE_NODE=$(hostname)
    echo ""
    echo "========================================="
    echo "Chroma Vector Database Ready!"
    echo "========================================="
    echo "Endpoint: http://${COMPUTE_NODE}:8000"
    echo "API Docs: http://${COMPUTE_NODE}:8000/docs"
    echo ""
    echo "Test from login node or other jobs:"
    echo "  curl http://${COMPUTE_NODE}:8000/api/v1/heartbeat"
    echo ""
    echo "Python client example:"
    echo "  import chromadb"
    echo "  client = chromadb.HttpClient(host='${COMPUTE_NODE}', port=8000)"
    echo "  client.heartbeat()"
    echo ""
    echo "Create a collection example:"
    echo "  curl -X POST http://${COMPUTE_NODE}:8000/api/v1/collections \\"
    echo "    -H 'Content-Type: application/json' \\"
    echo "    -d '{\"name\": \"test_collection\"}'"
    echo ""
    echo "Data directory: /project/scratch/\$SLURM_JOB_ACCOUNT/team-5/chroma/data"
    echo "Job will run until time limit or manual cancellation"
    echo "========================================="
    
    # Keep container alive - wait for server process
    wait $SERVER_PID
    EXIT_CODE=$?
    echo ""
    echo "Server exited with code: $EXIT_CODE"
    exit $EXIT_CODE

working_dir: /chroma
